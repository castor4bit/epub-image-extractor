"use strict";const e=require("electron"),i={getVersion:()=>e.ipcRenderer.invoke("app:version"),processEpubFiles:r=>e.ipcRenderer.invoke("epub:process",r),getDroppedFilePaths:r=>Array.from(r).map(n=>{let t="";if(e.webUtils&&e.webUtils.getPathForFile)try{t=e.webUtils.getPathForFile(n)}catch(s){console.error("[Preload] ファイルパス取得エラー:",s)}return{path:t,name:n.name,size:n.size,type:n.type}}),onProgress:r=>{const n=(t,s)=>r(s);return e.ipcRenderer.on("epub:progress",n),()=>{e.ipcRenderer.removeListener("epub:progress",n)}},selectOutputDirectory:()=>e.ipcRenderer.invoke("dialog:selectDirectory"),getSettings:()=>e.ipcRenderer.invoke("settings:get"),saveSettings:r=>e.ipcRenderer.invoke("settings:save",r),resetSettings:()=>e.ipcRenderer.invoke("settings:reset"),clearWindowBounds:()=>e.ipcRenderer.invoke("settings:clearWindowBounds"),openFolder:r=>e.ipcRenderer.invoke("file:openFolder",r),updateProcessingState:r=>{e.ipcRenderer.send("app:updateProcessingState",r)},send:(r,...n)=>{["window:mouseenter","window:mouseleave"].includes(r)&&e.ipcRenderer.send(r,...n)}};e.contextBridge.exposeInMainWorld("electronAPI",i);
