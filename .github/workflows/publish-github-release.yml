name: Publish GitHub Release

on:
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build process (for testing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Check if release PR was merged
        id: check-merged
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            // 最近マージされたRelease PRを探す
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const releasePR = pulls.find(pr => 
              pr.merged_at && 
              pr.title.startsWith('chore(main): release') &&
              new Date(pr.merged_at) > new Date(Date.now() - 24 * 60 * 60 * 1000) // 24時間以内
            );
            
            if (!releasePR) {
              core.setFailed('No recently merged release PR found. Please merge a release PR first.');
              return;
            }
            
            console.log(`Found merged release PR: #${releasePR.number} - ${releasePR.title}`);
            core.setOutput('pr_number', releasePR.number);
            core.setOutput('pr_title', releasePR.title);

      - name: Create GitHub Release
        uses: googleapis/release-please-action@16a9c90856f42705d54a6fda1823352bdc62cf38 # v4.4.0
        id: release
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          # skip-github-releaseを指定しない（リリースを作成する）

  build-and-release:
    needs: create-release
    if: needs.create-release.outputs.release_created == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
            build_cmd: dist:mac-x64
          - os: macos-latest
            arch: arm64
            build_cmd: dist:mac-arm64
          - os: windows-latest
            arch: x64
            build_cmd: dist:win
    
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # 作成されたタグをチェックアウト
        ref: ${{ needs.create-release.outputs.tag_name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: 24.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run ${{ matrix.build_cmd }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # コード署名を無効化（後でad-hoc署名を追加）
        CSC_IDENTITY_AUTO_DISCOVERY: false
    
    - name: Add ad-hoc signature (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Build architecture-specific DMG filename
        PRODUCT_NAME="EPUB Image Extractor"
        VERSION=$(node -p "require('./package.json').version")
        DMG_FILE="release/${PRODUCT_NAME}-${VERSION}-${{ matrix.arch }}.dmg"
        
        echo "Looking for DMG: $DMG_FILE"
        
        # Verify DMG exists
        if [ ! -f "$DMG_FILE" ]; then
          echo "Error: DMG file not found: $DMG_FILE"
          exit 1
        fi
        
        echo "Found DMG: $DMG_FILE"
        
        # Create temporary directory
        TEMP_DIR=$(mktemp -d)
        echo "Temp directory: $TEMP_DIR"
        
        # Mount DMG
        MOUNT_POINT="$TEMP_DIR/mnt"
        mkdir -p "$MOUNT_POINT"
        hdiutil attach "$DMG_FILE" -nobrowse -mountpoint "$MOUNT_POINT"
        
        # Find application
        APP_PATH=$(find "$MOUNT_POINT" -name "*.app" -type d | head -n 1)
        echo "Found app: $APP_PATH"
        
        # Get original app name
        APP_NAME=$(basename "$APP_PATH")
        echo "App name: $APP_NAME"
        
        # Create working directory
        WORK_DIR="$TEMP_DIR/work"
        mkdir -p "$WORK_DIR"
        
        # Copy entire DMG contents to preserve layout
        echo "Copying DMG contents..."
        cp -R "$MOUNT_POINT/"* "$WORK_DIR/"
        
        # Unmount DMG
        hdiutil detach "$MOUNT_POINT"
        
        # Add ad-hoc signature
        echo "Adding ad-hoc signature to $APP_NAME..."
        codesign --force --deep --sign - "$WORK_DIR/$APP_NAME"
        
        # Verify signature
        echo "Verifying signature..."
        codesign --verify --verbose "$WORK_DIR/$APP_NAME"
        
        # Create new DMG with preserved layout
        DMG_NAME=$(basename "$DMG_FILE" .dmg)
        NEW_DMG="release/${DMG_NAME}-signed.dmg"
        
        echo "Creating new DMG: $NEW_DMG"
        hdiutil create -volname "$PRODUCT_NAME" \
          -fs HFS+ \
          -srcfolder "$WORK_DIR" \
          -ov \
          -format UDZO \
          "$NEW_DMG"
        
        # Replace original DMG with signed version
        mv "$NEW_DMG" "$DMG_FILE"
        
        # Cleanup
        rm -rf "$TEMP_DIR"
        
        echo "Ad-hoc signing completed successfully"
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: release/*${{ matrix.arch }}.dmg
        retention-days: 7

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: release/*${{ matrix.arch }}*.exe
        retention-days: 7

  upload-release-assets:
    needs: [create-release, build-and-release]
    if: needs.create-release.outputs.release_created == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    
    - name: Download all artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: release-artifacts
    
    - name: Upload release assets
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          release-artifacts/macos-latest-x64-build/*
          release-artifacts/macos-latest-arm64-build/*
          release-artifacts/windows-latest-x64-build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}