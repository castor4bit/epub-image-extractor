name: Execute Release

on:
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build process (for testing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if release PR was merged
        id: check-merged
        uses: actions/github-script@v7
        with:
          script: |
            // 最近マージされたRelease PRを探す
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const releasePR = pulls.find(pr => 
              pr.merged_at && 
              pr.title.startsWith('chore(main): release') &&
              new Date(pr.merged_at) > new Date(Date.now() - 24 * 60 * 60 * 1000) // 24時間以内
            );
            
            if (!releasePR) {
              core.setFailed('No recently merged release PR found. Please merge a release PR first.');
              return;
            }
            
            console.log(`Found merged release PR: #${releasePR.number} - ${releasePR.title}`);
            core.setOutput('pr_number', releasePR.number);
            core.setOutput('pr_title', releasePR.title);

      - name: Create GitHub Release
        uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          # skip-github-releaseを指定しない（リリースを作成する）

  build-and-release:
    needs: create-release
    if: needs.create-release.outputs.release_created == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
            build_cmd: dist:mac-x64
          - os: macos-latest
            arch: arm64
            build_cmd: dist:mac-arm64
          - os: windows-latest
            arch: x64
            build_cmd: dist:win
    
    steps:
    - uses: actions/checkout@v4
      with:
        # 作成されたタグをチェックアウト
        ref: ${{ needs.create-release.outputs.tag_name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 24.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run ${{ matrix.build_cmd }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # コード署名を無効化（後でad-hoc署名を追加）
        CSC_IDENTITY_AUTO_DISCOVERY: false
    
    - name: Add ad-hoc signature (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # DMGファイルを見つける
        DMG_FILE=$(find release -name "*.dmg" -type f | head -n 1)
        echo "Found DMG: $DMG_FILE"
        
        # 一時ディレクトリを作成
        TEMP_DIR=$(mktemp -d)
        echo "Temp directory: $TEMP_DIR"
        
        # DMGをマウント
        hdiutil attach "$DMG_FILE" -nobrowse -mountpoint "$TEMP_DIR/mnt"
        
        # アプリケーションを見つける
        APP_PATH=$(find "$TEMP_DIR/mnt" -name "*.app" -type d | head -n 1)
        echo "Found app: $APP_PATH"
        
        # 作業ディレクトリにコピー
        cp -R "$APP_PATH" "$TEMP_DIR/app.app"
        
        # DMGをアンマウント
        hdiutil detach "$TEMP_DIR/mnt"
        
        # Ad-hoc署名を追加
        echo "Adding ad-hoc signature..."
        codesign --force --deep --sign - "$TEMP_DIR/app.app"
        
        # 署名を確認
        echo "Verifying signature..."
        codesign --verify --verbose "$TEMP_DIR/app.app"
        
        # 新しいDMGを作成
        DMG_NAME=$(basename "$DMG_FILE" .dmg)
        NEW_DMG="release/${DMG_NAME}-signed.dmg"
        
        echo "Creating new DMG: $NEW_DMG"
        hdiutil create -volname "EPUB Image Extractor" -srcfolder "$TEMP_DIR/app.app" -ov -format UDZO "$NEW_DMG"
        
        # 元のDMGを署名済みに置き換え
        mv "$NEW_DMG" "$DMG_FILE"
        
        # クリーンアップ
        rm -rf "$TEMP_DIR"
        
        echo "Ad-hoc signing completed successfully"
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: release/*${{ matrix.arch }}.dmg
        retention-days: 7

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: release/*${{ matrix.arch }}*.exe
        retention-days: 7

  upload-release-assets:
    needs: [create-release, build-and-release]
    if: needs.create-release.outputs.release_created == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          release-artifacts/macos-latest-x64-build/*
          release-artifacts/macos-latest-arm64-build/*
          release-artifacts/windows-latest-x64-build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}